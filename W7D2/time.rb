def my_min(list)
    time = Time.now
    smallest = list[0]
    list.each do |el|
        smallest = el if el < smallest
    end
    puts Time.now - time
    smallest
end

def my_min2(list)
    time = Time.now
    smallest = list[0]
    list.each do |el|
        list.each do |el2|
            smallest = el if el < el2 && el < smallest
            smallest = el2 if el > el2 && el2 < smallest
        end
    end
    puts Time.now - time
    smallest
end

# list = [ 0, 3, 5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, 90, 90, 0, 3, 5, 4, -5, 10, 1, 90, 90, 0, 3, 5, 4, -5, 10, 1, 90, 90, 0, 3, 5, 4, -5, 10, 1, 90]

# p my_min(list)
# p my_min2(list)

def largest(list)
    time = Time.now
    arr = []
    list.each_with_index do |el, i|
        list.each_with_index do |el2, i2|
            arr << list[i..i + i2]
        end
    end
    max = arr[0].sum
    arr.each do |el|
        max = el.sum if el.sum > max
    end
    puts Time.now - time
    max
end

list = [ 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, -5, 4, -5, 10, 1, 90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10, 1, -90, 0, 3, 5, 4, -5, 10, 1, -90, 90, 0, 3, 5, 4, -5, 10]
# list = [5, 3, -7]

# p largest(list)

# largest = 1
# [1,2,3,4]
# [1,-2,2,3,4]


def largest2(list)
    time = Time.now
    largest_sum = list.max
    sum = 0
    list.each do |el|
        sum += el
        if sum < 0
            sum = 0
        end
        if largest_sum < sum
            largest_sum = sum
        end
    end
    p Time.now - time
    return list.max if sum <= 0
    return largest_sum
end

# list = [2, 3, -6, 7, -6, 7]
# list = [5, 3, -7]
# list = [-5, -1, -3]
p largest(list)
p largest2(list)
p list.count